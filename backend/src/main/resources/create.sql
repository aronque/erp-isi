--TABELAS USUÁRIO
CREATE TABLE TIPO_USUARIO (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    TIPO VARCHAR(7),
    DESCRICAO VARCHAR(100),
    PRIMARY KEY(ID)
);

CREATE TABLE USUARIOS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NOME VARCHAR(60),
    EMAIL VARCHAR(60),
    SENHA VARCHAR(18),
    TIPO_ID BIGINT,
    PRIMARY KEY(ID)
);

ALTER TABLE IF EXISTS USUARIOS ADD CONSTRAINT FK_TIPO_USUARIO FOREIGN KEY (TIPO_ID) REFERENCES TIPO_USUARIO;
------------------------------------------------------------------------------------------------------------------------
--TABELAS FORNECEDOR
CREATE TABLE ENDERECOS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    RUA VARCHAR(40),
    NUMERO VARCHAR(10),
    BAIRRO VARCHAR(40),
    CIDADE VARCHAR(40),
    ESTADO_UF VARCHAR(2),
    CEP VARCHAR(9),
    PRIMARY KEY(ID)
);

CREATE TABLE FORNECEDORES (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NOME VARCHAR(60),
    CNPJ VARCHAR(14),
    CONTATO VARCHAR(60),
    ENDERECO_ID BIGINT,
    PRIMARY KEY(ID)
);

ALTER TABLE IF EXISTS FORNECEDORES ADD CONSTRAINT FK_END_FORNECEDORES FOREIGN KEY (ENDERECO_ID) REFERENCES ENDERECOS;

------------------------------------------------------------------------------------------------------------------------
--TABELAS PRODUTO
CREATE TABLE PRODUTOS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NOME VARCHAR(60),
    QNT_ESTOQUE INT,
    PRECO FLOAT8,
    FORNECEDOR_ID BIGINT,
    PRIMARY KEY(ID)
);

ALTER TABLE IF EXISTS PRODUTOS ADD CONSTRAINT FK_FORN_PRODUTOS FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDORES;

------------------------------------------------------------------------------------------------------------------------
--TABELAS PEDIDO
CREATE TABLE PEDIDOS (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    DATA_PEDIDO DATE,
    STATUS_PEDIDO VARCHAR(20),
    USUARIO_ID BIGINT,
	FORNECEDOR_ID BIGINT,
    PRIMARY KEY(ID)
);

ALTER TABLE IF EXISTS PEDIDOS ADD CONSTRAINT FK_USER_PEDIDOS FOREIGN KEY (USUARIO_ID) REFERENCES USUARIOS;
ALTER TABLE IF EXISTS PEDIDOS ADD CONSTRAINT FK_FORN_PEDIDOS FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDORES;

CREATE TABLE ITEM_PEDIDO (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY,
    QUANTIDADE INT,
    PEDIDO_ID BIGINT,
    PRODUTO_ID BIGINT,
    PRIMARY KEY(ID)
);

--ALTERAR PARA REFERENCIAR PEDIDO
ALTER TABLE IF EXISTS ITEM_PEDIDO ADD CONSTRAINT FK_PED_PRODUTOS FOREIGN KEY (PEDIDO_ID) REFERENCES PEDIDOS;
ALTER TABLE IF EXISTS ITEM_PEDIDO ADD CONSTRAINT FK_PROD_ITEM FOREIGN KEY (PRODUTO_ID) REFERENCES PRODUTOS;
------------------------------------------------------------------------------------------------------------------------

INSERT INTO TIPO_USUARIO VALUES(1, 'ESTOQUE', 'Funcionario do estoque com acesso limitado');
INSERT INTO TIPO_USUARIO VALUES(2, 'GERENTE', 'Funcionario nivel gerente do estoque com acesso total');
INSERT INTO TIPO_USUARIO VALUES(3, 'COMUM', ' Funcionario comum da empresa que possui acesso a abertura de pedido');
INSERT INTO TIPO_USUARIO VALUES(4, 'SUPORTE', 'Operador do suporte ao usuário do sistema');

------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION verificaTipoPedido(pedido_id bigint) RETURNS integer AS $$
DECLARE tipo character varying := (SELECT dtype FROM pedidos WHERE id = pedido_id);
BEGIN
	IF (tipo = 'PedidoSaidaEstoque')
		THEN RETURN 1;
	END IF;

	RETURN 0;
END;
$$ language plpgsql;



CREATE OR REPLACE FUNCTION asseguraTemQuantidade() RETURNS trigger AS $$
BEGIN
	IF (NEW.quantidade > (SELECT qnt_estoque FROM produtos WHERE id = NEW.produto_id))
		THEN RAISE EXCEPTION 'QUANTIDADE A SER RETIRADA MAIOR DO QUE EXISTENTE EM ESTOQUE!' ;
	END IF;

	IF (NEW.quantidade <= (SELECT qnt_estoque FROM produtos WHERE id = NEW.produto_id))
		THEN UPDATE produtos SET qnt_estoque = produtos.qnt_estoque - NEW.quantidade WHERE produtos.id = NEW.produto_id;
		RETURN NEW;
	END IF;
END;
$$ language plpgsql;


--TODO arrumar esse trigger
CREATE OR REPLACE FUNCTION asseguraTemQuantidadeUpdate() RETURNS trigger AS $$
BEGIN
--quantidade adicionada (qnt_nova - qnt_antiga, quando qnt_nova>qnt_antiga) > quantidade em estoque: erro
	IF (NEW.quantidade > (SELECT quantidade FROM item_pedido WHERE id = NEW.id) AND (
			(NEW.quantidade - (SELECT quantidade FROM item_pedido WHERE id = NEW.id)) > (SELECT qnt_estoque FROM produtos WHERE id = NEW.produto_id)))
		THEN RAISE EXCEPTION 'QUANTIDADE A SER RETIRADA MAIOR DO QUE EXISTENTE EM ESTOQUE!' ;
	END IF;

--quantidade retirada (qnt_antiga - qnt_nova, quando qnt_nova<qnt_antiga) < quantidade em estoque: adicionar no estoque quantidade retirada do pedido
	IF (NEW.quantidade < (SELECT quantidade FROM item_pedido WHERE id = NEW.id) AND (
			((SELECT quantidade FROM item_pedido WHERE id = NEW.id) - NEW.quantidade) < (SELECT qnt_estoque FROM produtos WHERE id = NEW.produto_id)))
		THEN UPDATE produtos SET qnt_estoque = produtos.qnt_estoque + ((SELECT quantidade FROM item_pedido WHERE id = NEW.id) - NEW.quantidade) WHERE produtos.id = NEW.produto_id;
	END IF;

--quantidade adicionada (qnt_nova - qnt_antiga, quando qnt_nova>qnt_antiga) <= quantidade em estoque: retirar do estoque quantidade adicionada no pedido
	IF (NEW.quantidade > (SELECT quantidade FROM item_pedido WHERE id = NEW.id) AND (
			(NEW.quantidade - (SELECT quantidade FROM item_pedido WHERE id = NEW.id)) <= (SELECT qnt_estoque FROM produtos WHERE id = NEW.produto_id)))
		THEN UPDATE produtos SET qnt_estoque = produtos.qnt_estoque - NEW.quantidade WHERE produtos.id = NEW.produto_id;
		RETURN NEW;
	END IF;
END;
$$ language plpgsql;



--TRIGGER para garantir que nao crie um pedido de saida com mais produtos do que existente em estoque NA INSERÇÃO
CREATE OR REPLACE TRIGGER trg_qnt_estoque
BEFORE INSERT ON item_pedido
FOR EACH ROW
	WHEN(verificaTipoPedido(NEW.pedido_id) = 1)
		EXECUTE FUNCTION asseguraTemQuantidade();



--TRIGGER para garantir que nao crie um pedido de saida com mais produtos do que existente em estoque NA ATUALIZAÇÃO
--garante tambem que quando a quantidade eh alterada para menor do que antes, retorne ao estoque os produtos
CREATE OR REPLACE TRIGGER trg_qnt_estoque_update
BEFORE UPDATE ON item_pedido
FOR EACH ROW
	WHEN(verificaTipoPedido(NEW.pedido_id) = 1)
		EXECUTE FUNCTION asseguraTemQuantidadeUpdate();